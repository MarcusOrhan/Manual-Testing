1. How does quality control differ from quality assurance?
Quality Assurance:
Quality assurance is a process-oriented approach that focuses on making sure that the methods, techniques, and processes used to create quality deliverables are applied correctly.
Quality Control	:
Quality control is a product-oriented approach of running a program to determine if it has any defects, as well as to make sure that the software meets all of the requirements put forth by the stakeholders.

2. What is Software Testing?
Software Testing is a process used to identify developed software’s correctness, completeness, and quality. It includes a series of activities conducted to find software errors so that it can be corrected before the product is released to the market.

3.  Why is Software Testing Required?
Software testing is a mandatory process that guarantees that the software product is safe and good enough to be released to the market. Here are some compelling reasons to prove testing is needed:
It points out the defects and errors that were made during the development phases.
Reduces the coding cycles by identifying issues at the initial stage of the development.
Ensures that software application requires lower maintenance cost and results in more accurate, consistent and reliable results.
Testing ensures that the customer finds the organization reliable and their satisfaction in the application is maintained.
Makes sure that software is bug-free and the quality of the product meets the market standard.
Ensures that the application doesn’t result in any failures.

4.  What different types of manual testing are there?
Different types of manual testing are;
Black Box Testing
White Box Testing
Unit Testing
System Testing
Integration Testing
Acceptance Testing
5. Explain the difference between alpha testing and beta testing.
Alpha Testing – It is a type of software testing performed to identify bugs before releasing the product to real users or to the public. Alpha Testing is a type of user acceptance testing.
Beta Testing – It is performed by real users of the software application in a real environment. Beta Testing is also a type of user acceptance testing.
6. . What are the different levels of manual testing?
Four levels of manual testing are:
Unit testing – It is a way of testing the smallest piece of code referred to as a unit that can be logically isolated in a system. It is mainly focused on the functional correctness of the standalone module.
Integration Testing – It is a level of software testing where individual units are combined and tested to verify if they are working as they intend to when integrated. The main aim here is to test the interface between the modules.
System Testing – In system testing all the components of the software are tested as a whole in order to ensure that the overall product meets the requirements specified. There are dozens of types of system testing, including usability testing, regression testing, and functional testing.
User Acceptance Testing – The final level, acceptance testing, or UAT (user acceptance testing), determines whether or not the software is ready to be released.
7.  What is a testbed in manual testing?
The testbed is an environment configured for testing. It is an environment used for testing an application, including the hardware as well as any software needed to run the program to be tested. It consists of hardware, software, network configuration, an application under test, other related software.

8.  Explain the procedure for manual testing?
The manual testing process comprises the following steps:
Planning and Control
Analysis and Design
Implementation and Execution
Evaluating exit criteria and Reporting
Test Closure activities

9.  What is the test case?
A test case is a document that has a set of conditions or actions that are performed on the software application in order to verify the expected functionality of the feature.
Test cases describe a specific idea that is to be tested, without detailing the exact steps to be taken or data to be used. For example, in a test case, you document something like ‘Test if coupons can be applied on actual price‘.

10.  What is API testing?
API testing is a type of software testing where application programming interfaces (APIs) are tested to determine if they meet expectations for functionality, reliability, performance, and security. In simple terms, API testing is intended to reveal bugs, inconsistencies or deviations from the expected behavior of an API.
applications have three separate layers:

Presentation Layer or user interface
Business Layer or application user interface for business logic processing
Database Layer for modeling and manipulating data
API testing is performed at the most critical layer of software architecture, the Business Layer. 

11. 14. What’s the difference between a bug and a defect?
A bug is a just fault in the software that’s detected during testing time. A defect is a variance between expected results and actual results, detected by the developer after the product goes live.

12. What exactly is manual software testing, and how does it differ from automated software testing?
Manual software testing is a process where human testers manually run test cases, then generate the resulting test reports. With automation software testing, these functions are executed by automation tools such as test scripts and code. The tester takes the end user’s role to determine how well the app works.

13. 4. What are the advantages of manual testing?
Manual testing’s strengths are:

It’s cheaper
You get visual feedback that’s accurate and quick
It’s ideal for testing minor changes
It’s perfect for ad hoc testing
Testers don’t have to know anything about automation tools
It’s great for testing UI’s

5. On the other hand, what are the drawbacks to manual testing?
Manual testing’s weaknesses are:
Susceptible to human error
Some tasks may be difficult to accomplish manually, requiring more time to complete
The cost adds up, so it’s more expensive in the long run
You cannot record the manual testing process, so it’s hard to replicate it 

6. What kind of skills are needed for someone to become a software tester? 
Software testers need skills such as:
Problem-solving skills
Excellent written and verbal communication skills
Detail-oriented
Able to handle the pressure
Can work solo or as a team member equally well
Organizational skills
Related technical skills

7. Explain what is SDLC.
This is an acronym for Software Development Life Cycle and encompasses all of the stages of software development, including requirement gathering and analysis, designing, coding, testing, deployment, and maintenance.

8. What is a test case?
Test case is used to check whether an application complies with its requirements. It is a documented set of circumstances including prerequisites, input values, and expected outcomes.



WATERFALL methods
*pros 
clear documentation ==> good quality 
no requirement change ==> less bugs
less initial investment ==> small teams testers involved later
small projects reqirements are freezed

*cons 
Requirement changes not alloved 
Defect in requirement will continue next phases
high total investment rework on defect
testing starts after coding

---------SPIRAL MODEL----------

*ITERATIVE MODEL
overcome drawbacks of Waterfall
open to new frequent requirements 
good for requirement (dependency of modules)
new  software will released to costumeer
it is called version control modeling

__*Pros__*cons
Testing done in every cycles 
costumer will get to use the software for every cycles
Requirement changes are allowed.
__ Requiremnt changes are not allowed in the cycle
__Every cycle is similar to a small Waterfall
__there is no testingin requirement & design phase.

-------V MODEL (verification and validation model)-------
more documentation

LEVELS OF TESTING 

---- Unit Test----:
conducts single component of a module of asoftware

---- Integration testing----
aims to test different parts of the system in combination in order to assess if they work correctly together.

---- System testing----
all the components of the software are tested as a whole in order to ensure that the overall product meets the requirements specified.

---- Acceptance testing----
evaluate whether the system complies with the end-user requirements and if it is ready for deployment.
